%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%空中で滞空するドローンを上昇させ，同時に機体を傾ける制御(y-z飛行)のデータベース
%
%　入力値 y座標の目標値 yd
%　出力値 x軸周りの操舵角 p
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%固定するパラメータ%
h = 0.01; % 時間のサンプリング間隔
k1 = 0.066; %z軸方向の偏差に関わるゲイン
k2 = 0.45; %z軸方向の速度に関わるゲイン
k3 = 0.01; %x軸周りの角速度に関わるゲイン
k4 = 0.00001; %y軸周りの角速度に関わるゲイン
k5 = 0.09; %z軸周りの角速度に関わるゲイン
zd = 7.308; %z軸の目標値[m]
pd = 0; %x軸周りの角度の目標値[rad]
qd = 0; %y軸周りの角度の目標値[rad]
rd = 0; %z軸周りの角度の目標値[rad]
t1 = 3; %姿勢制御時間[s]

%%% JITで計算する要求データ %%%
yd =1.618; %y座標の目標値(1〜5)[m]

%%% dataファイルの読み込み %%%
filename = 'data_fly_xyz.csv';
d = csvread(filename);
n = length(d);

%%% 要求データとデータベースの距離を計算 %%%
for i=1:n
    d(i,3) = sqrt((yd-d(i,1))^2);
end

%%% ユークリッド距離が小さい順に行をソートする(1回目のソート) %%%
dd1 = sortrows(d,3);

%%% dd1内の上位　組のデータを抽出 %%%
dd2 = zeros(50,3);

for i = 1:50
    dd2(i,1) = dd1(i,1);
    dd2(i,2) = dd1(i,2);
    dd2(i,3) = dd1(i,3);
end    

%%% 姿勢角が小さい順に行をソートする(2回目のソート) %%%
dd3 = sortrows(dd2,2);

dd4 = zeros(10,3);

for i = 1:10
    dd4(i,1) = dd3(i,1);
    dd4(i,2) = dd3(i,2);
    dd4(i,3) = dd3(i,3);
end    

dd = sortrows(dd4,3);

%%% JITのアルゴリズム：距離の逆数を重みとした平均 %%%
nn = round(n/100); % 近傍データの数
P1 = 0; % 求める最大姿勢角p1の値の初期化
DD = 0; % 距離の逆数の総和の初期化
if dd(1,3) == 0 
    P1 = dd(1,2); % もし要求データがデータベースに一致すればそのデータを使う
else
    for i=1:10
        P1 = P1 + dd(i,2)/dd(i,3);
        DD = DD + 1/dd(i,3);
    end
    P1 = P1/DD; % JITで求められたゲインk1
end

%%%微分方程式を解く%%%
[T1, U1] = ode45(@droneupextra2,(0:h:3),[0;0;0;0;0;0;0;0;0;0;0;0],[],k1,k2,k3,k4,k5,zd,pd,qd,rd,P1,t1);
U0 = U1(301,:);
[T2, U2] =  ode45(@droneupextrabackl,(3:h:50),U0,[],k1,k2,k3,k4,k5,zd,pd,qd,rd);

T = [T1;T2]; % 時間変数を結合
U = [U1;U2]; % 状態変数を結合

yo = U(5002,3); 

plot3(U(:,1),U(:,3),U(:,5),'-')
xlim([-5 5])
ylim([-5 5])
zlim([0 10])
xlabel('x[m]')
ylabel('y[m]')
zlabel('z[m]')
grid on
grid minor